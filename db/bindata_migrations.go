// Code generated by go-bindata.
// sources:
// db/migrations/0-pragma.sql
// db/migrations/1-initial.sql
// DO NOT EDIT!

package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbMigrations0PragmaSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8e\xcd\xaa\x83\x30\x10\x46\xf7\x79\x8a\x6f\x7f\xc9\x13\x04\x17\x17\x74\xe7\xf2\x5e\xba\x94\x69\x1d\xd3\xf8\x33\x13\x92\x88\xf8\xf6\xc5\x82\x50\x84\xae\xbf\x73\x66\x8e\xb5\xf8\x59\x82\x4f\x54\x18\xff\x11\xa2\x25\x91\x64\x7a\x94\xa0\x62\xac\x05\x0b\xdd\x67\xc6\xa0\x89\x83\x17\x4c\xbc\x23\xaf\x31\x6a\x2a\x26\x26\xf2\x0b\x9d\x53\x37\xf1\x9e\x51\x41\xc5\x1d\x5e\xe6\x82\x51\x93\xd0\x8c\x45\x7b\x46\x51\x6c\x29\x14\x06\x3d\x99\x7a\xcc\xea\x4f\x1f\xa3\xae\x07\xd7\xbd\xb9\x0a\xb7\xdf\xd6\x19\xf3\xd9\x55\xeb\x26\x97\xb2\x2f\xbf\x87\xc1\x99\x73\xbb\x9c\xad\x9b\xb6\xf9\x6b\xdc\x2b\x00\x00\xff\xff\x07\xb2\xc4\x19\xf0\x00\x00\x00")

func dbMigrations0PragmaSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0PragmaSql,
		"db/migrations/0-pragma.sql",
	)
}

func dbMigrations0PragmaSql() (*asset, error) {
	bytes, err := dbMigrations0PragmaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0-pragma.sql", size: 240, mode: os.FileMode(420), modTime: time.Unix(1487131738, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations1InitialSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x54\xcb\x8e\xa3\x40\x0c\xbc\xf3\x15\x3e\x26\xda\x8d\xb4\x77\xae\xfb\x0b\x7b\x46\x86\x76\x12\x6b\xc1\xdd\xb2\xdd\x33\xc9\xdf\x8f\x3a\x44\x33\x10\x60\x34\xca\x21\x37\xd4\x55\xe5\x47\xd9\xe6\x70\x80\x5f\x03\x9f\x14\x9d\xe0\x5f\xaa\x3a\xa5\xf2\xe5\xd8\xf6\x04\xe6\x4a\x38\x34\x46\xfa\x46\xba\xab\x00\x00\x38\x00\x8b\xd3\x89\x14\x92\xf2\x80\x7a\x85\xff\x74\x05\xcc\x1e\x59\x3a\xa5\x81\xc4\x7f\xdf\x98\x76\x8e\xea\x0d\x07\x70\xba\x38\x48\x74\x90\xdc\xf7\x23\x26\x38\xd0\xda\xfb\x39\x9a\x6f\x61\x25\xad\x0a\xf6\x0d\xa7\x35\x98\x2e\x1b\x70\xb5\xaf\xab\x79\x5b\xd9\x5e\xd3\x4d\x20\xeb\x94\x93\x73\x94\x07\x64\x2c\x27\x34\xe8\x10\xd0\xc9\x79\xa0\x4f\x06\x04\x3a\x62\xee\x1d\xba\xac\x4a\xe2\x4d\x41\xcd\x71\x48\xa3\x36\xe5\xb6\x67\x3b\xd3\xad\xf4\xa5\xea\xcf\xbd\xde\xdc\x96\xe4\xed\x26\x6d\x69\xcb\x38\xed\x57\x1b\xb3\x02\x9b\xa3\x3e\xeb\x0e\x49\x78\x52\x69\x8e\x9e\xed\x67\xa6\x6a\xd3\xc5\x2c\xfe\x2d\x99\x24\xa4\x58\x08\xab\x1d\x4e\x0e\xab\xe1\xf9\x8c\x26\x2b\x12\x37\x40\x57\x14\x4b\xc5\xf8\xac\xfd\x5a\x82\x63\x54\xe2\x93\x94\xa1\xed\xbe\x22\xed\x41\xe9\x48\x4a\xd2\x91\x8d\x57\xc0\x61\xbf\x14\x3c\x56\x37\x93\xcd\x40\x2b\x01\x6e\x9b\x34\xfd\x8d\xfc\x8d\xef\x52\x05\x8d\x69\xb6\x58\xf5\xf4\xa9\x24\xaf\x97\x9c\x7b\xd8\xfa\x23\x00\x00\xff\xff\x37\x30\x63\xb2\x95\x04\x00\x00")

func dbMigrations1InitialSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations1InitialSql,
		"db/migrations/1-initial.sql",
	)
}

func dbMigrations1InitialSql() (*asset, error) {
	bytes, err := dbMigrations1InitialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/1-initial.sql", size: 1173, mode: os.FileMode(420), modTime: time.Unix(1487133205, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/migrations/0-pragma.sql": dbMigrations0PragmaSql,
	"db/migrations/1-initial.sql": dbMigrations1InitialSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"0-pragma.sql": &bintree{dbMigrations0PragmaSql, map[string]*bintree{}},
			"1-initial.sql": &bintree{dbMigrations1InitialSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

