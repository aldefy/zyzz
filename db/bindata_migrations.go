// Code generated by go-bindata.
// sources:
// db/migrations/1-initial.sql
// db/migrations/2-userchanges.sql
// db/migrations/3-event.sql
// db/migrations/4-stream-activelisteners.sql
// DO NOT EDIT!

package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbMigrations1InitialSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x92\xcf\x4e\xf4\x30\x0c\xc4\xef\x79\x0a\x1f\xbf\x4f\xb0\x12\xf7\x5e\x79\x05\xce\x91\xdb\x0c\x5b\x8b\xfc\x93\xe3\xc0\xee\xdb\xa3\xb6\x08\x75\x61\x7b\xe5\x16\xf9\x37\x96\xc7\x13\x9f\x4e\xf4\x90\xe4\xac\x6c\xa0\x97\xea\x26\xc5\xf2\x32\x1e\x23\xa8\x99\x82\x93\x6f\xd0\x77\xe8\x3f\x47\x44\x24\x81\x24\x1b\xce\x50\xaa\x2a\x89\xf5\x4a\x6f\xb8\x12\x77\x2b\x92\x27\x45\x42\xb6\xc7\x55\xd9\xe6\xa2\xe6\x25\x90\xe1\x62\x94\x8b\x51\xee\x31\x6e\x2c\x73\xc2\xbd\xfa\x5c\x9a\x1d\xb1\x65\xac\x66\x8e\x5e\xea\x3d\x8c\xcb\x01\x76\xff\x07\x77\xbb\x56\x6f\xd0\xf6\x17\xeb\x04\xb4\x49\xa5\x9a\x94\xfc\x83\x6c\x7e\x82\x67\xa3\xc0\x06\x93\x84\x6f\x05\x05\xbc\x72\x8f\x46\x53\x57\x45\x36\xbf\xd0\x66\x9c\xea\xd6\x5b\xfb\x18\xa5\xcd\x58\xad\xff\xee\x7a\xfa\xf2\xdb\xc7\x65\xf8\x78\x28\x5b\x73\x71\xfb\xef\x7f\x2e\x1f\xd9\x05\x2d\x75\x9f\xd3\xb0\xaf\xdc\x1c\xc4\xf0\x19\x00\x00\xff\xff\x2a\x00\x43\x01\x3b\x02\x00\x00")

func dbMigrations1InitialSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations1InitialSql,
		"db/migrations/1-initial.sql",
	)
}

func dbMigrations1InitialSql() (*asset, error) {
	bytes, err := dbMigrations1InitialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/1-initial.sql", size: 571, mode: os.FileMode(420), modTime: time.Unix(1490194356, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations2UserchangesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcf\x41\x0a\xc2\x30\x10\x85\xe1\x7d\x4f\x31\x7b\xe9\x09\xba\xf5\x0a\xae\x65\x9a\x3c\x25\x34\x99\x94\xc9\x54\x3d\xbe\x08\x2a\x11\x8a\xc9\xfe\xe7\x3d\xbe\x71\xa4\x43\x0a\x57\x65\x03\x9d\xd6\x81\xa3\x41\xc9\x78\x8e\xa0\xad\x40\x0b\xb1\xf7\xe4\x72\xdc\x92\x10\x12\x87\x48\x86\x87\x4d\xff\x43\x09\x6e\x11\x4e\xe8\x69\xf9\xc6\xc6\xba\x69\xd7\xf0\x65\x0e\xbe\x6b\xd4\x39\x94\x72\xb6\xbc\x40\xde\xfd\x50\x4b\x8f\xf9\x2e\x3b\x0b\x5e\xf3\xfa\x83\xdd\xbb\xa9\xa3\x0f\xb4\xd5\x7d\x91\xad\xf0\x05\x6c\x8e\x55\xb8\xe9\x19\x00\x00\xff\xff\x01\x3a\x88\x70\xc0\x01\x00\x00")

func dbMigrations2UserchangesSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations2UserchangesSql,
		"db/migrations/2-userchanges.sql",
	)
}

func dbMigrations2UserchangesSql() (*asset, error) {
	bytes, err := dbMigrations2UserchangesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/2-userchanges.sql", size: 448, mode: os.FileMode(420), modTime: time.Unix(1490194356, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations3EventSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\x31\x0e\xdb\x30\x0c\xdc\xfd\x0a\x8e\x31\xda\x00\xdd\xb3\xf6\x0b\x9d\x05\xd9\xba\x38\x42\x2d\xca\xa0\xa8\xa4\xf9\x7d\x21\x2b\x6e\xed\xc4\xe9\x90\xa1\x9b\x71\xc7\xb3\x78\x47\x4a\xc7\x23\x7d\x09\x7e\x10\xab\xa0\x1f\x53\xd3\x0b\xca\x97\xda\x6e\x04\xe1\x0a\xd6\x43\x43\x44\xe4\x1d\x79\x56\x0c\x10\x9a\xc4\x07\x2b\x77\xfa\x89\x3b\xd9\xac\xd1\x73\x2f\x08\x60\xfd\x3a\x57\xa6\x4b\x14\x35\xde\x91\xe2\x97\x12\x47\x25\xce\xe3\x58\x39\xb6\x01\x7b\xb8\x43\xea\xc5\x4f\xea\x23\x3f\x31\xb5\x1f\x67\xac\x92\xb3\x0a\xf5\x01\x7f\x2a\xc8\xe1\x6c\xf3\xa8\xd4\x67\x11\xb0\x9a\xc2\x26\xb5\x61\x7a\x74\xa2\x56\x74\x56\x2c\xd2\x8a\x83\xdd\x0e\x2a\x99\xd9\xf3\x60\x38\xde\x8a\xd5\x0a\x06\xab\xfd\xa5\x7a\x5f\x01\x59\x46\x4a\x2a\x9e\x87\xa6\x3d\x35\xdb\xcc\x92\x0a\x6c\xf8\xdf\xa1\xed\xd0\xb3\xfb\x0f\x93\x03\xbb\xcf\x33\xd7\x9c\x8a\xed\x57\xc9\xb7\x47\x49\xee\x4a\xe3\x1d\xc4\xf4\x31\xb3\xfe\xb3\x78\xca\xdd\xe8\xd3\xc5\x94\xc8\xf7\x4c\x2e\xff\x7a\x5b\x30\x8f\xc3\x24\xc8\x15\x62\xea\x40\xf6\x56\x2c\xbe\x21\x55\x2c\xa7\xa9\x0c\xe7\xcd\x01\xf3\x1d\x29\xda\xba\x10\x4f\xec\x39\x0a\xfc\xc0\x65\xec\x87\xbf\xe7\xb4\x24\x38\x43\xc0\x3d\x12\xe5\x04\x49\x07\xef\xda\x57\xc5\x73\xf3\x1b\xdd\x86\xdc\xd7\x2f\xbd\x6d\x74\xf5\x52\x2f\x0b\xd7\x96\x0d\x5e\xbf\x01\xdf\xe3\x8d\x1b\x27\x71\x5a\xbf\x01\xa7\x35\x52\x0f\x3e\xfd\x0e\x00\x00\xff\xff\x78\x34\x7e\x60\x39\x04\x00\x00")

func dbMigrations3EventSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations3EventSql,
		"db/migrations/3-event.sql",
	)
}

func dbMigrations3EventSql() (*asset, error) {
	bytes, err := dbMigrations3EventSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/3-event.sql", size: 1081, mode: os.FileMode(420), modTime: time.Unix(1490194356, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations4StreamActivelistenersSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcc\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\xfc\x1e\x9d\x44\x7f\x2d\x2b\x50\x23\x73\x31\x28\x92\x63\x47\xce\x0f\xac\x4f\x4b\x01\x0b\xbc\x6d\xc3\xa9\xb7\x67\x0a\x15\xd7\x51\xc4\xa8\x09\xca\xdd\x14\x93\xa9\xd2\x8b\xd4\x8a\x23\x6c\x75\x87\x1c\x6c\x2f\xbd\x59\x9b\x54\xd7\x9c\x68\x4e\x78\x10\xbe\xcc\x50\xf5\x21\xcb\x88\xf3\x5e\xca\x37\x7b\x89\xb7\xff\x82\x6b\xc6\xf8\x27\xef\x9f\x00\x00\x00\xff\xff\xd7\x36\xcd\xf0\x98\x00\x00\x00")

func dbMigrations4StreamActivelistenersSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations4StreamActivelistenersSql,
		"db/migrations/4-stream-activelisteners.sql",
	)
}

func dbMigrations4StreamActivelistenersSql() (*asset, error) {
	bytes, err := dbMigrations4StreamActivelistenersSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/4-stream-activelisteners.sql", size: 152, mode: os.FileMode(420), modTime: time.Unix(1489843670, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/migrations/1-initial.sql": dbMigrations1InitialSql,
	"db/migrations/2-userchanges.sql": dbMigrations2UserchangesSql,
	"db/migrations/3-event.sql": dbMigrations3EventSql,
	"db/migrations/4-stream-activelisteners.sql": dbMigrations4StreamActivelistenersSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"1-initial.sql": &bintree{dbMigrations1InitialSql, map[string]*bintree{}},
			"2-userchanges.sql": &bintree{dbMigrations2UserchangesSql, map[string]*bintree{}},
			"3-event.sql": &bintree{dbMigrations3EventSql, map[string]*bintree{}},
			"4-stream-activelisteners.sql": &bintree{dbMigrations4StreamActivelistenersSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

