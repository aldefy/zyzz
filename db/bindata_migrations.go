// Code generated by go-bindata.
// sources:
// db/migrations/0-pragma.sql
// db/migrations/1-initial.sql
// db/migrations/2-userchanges.sql
// db/migrations/3-event.sql
// DO NOT EDIT!

package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbMigrations0PragmaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\xcd\xaa\x83\x30\x10\x46\xf7\x79\x8a\x6f\x7f\xc9\x13\x04\x17\x17\x74\xe7\xf2\x5e\xba\x94\x69\x1d\xd3\xf8\x33\x13\x92\x88\xf8\xf6\xc5\x82\x50\x84\xae\xbf\x73\x66\x8e\xb5\xf8\x59\x82\x4f\x54\x18\xff\x11\xa2\x25\x91\x64\x7a\x94\xa0\x62\xac\x05\x0b\xdd\x67\xc6\xa0\x89\x83\x17\x4c\xbc\x23\xaf\x31\x6a\x2a\x26\x26\xf2\x0b\x9d\x53\x37\xf1\x9e\x51\x41\xc5\x1d\x5e\xe6\x82\x51\x93\xd0\x8c\x45\x7b\x46\x51\x6c\x29\x14\x06\x3d\x99\x7a\xcc\xea\x4f\x1f\xa3\xae\x07\xd7\xbd\xb9\x0a\xb7\xdf\xd6\x19\xf3\xd9\x55\xeb\x26\x97\xb2\x2f\xbf\x87\xc1\x99\x73\xbb\x9c\xad\x9b\xb6\xf9\x6b\xdc\x2b\x00\x00\xff\xff\x07\xb2\xc4\x19\xf0\x00\x00\x00")

func dbMigrations0PragmaSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0PragmaSql,
		"db/migrations/0-pragma.sql",
	)
}

func dbMigrations0PragmaSql() (*asset, error) {
	bytes, err := dbMigrations0PragmaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0-pragma.sql", size: 240, mode: os.FileMode(420), modTime: time.Unix(1487862705, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations1InitialSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x92\xcf\x4e\xf4\x30\x0c\xc4\xef\x79\x0a\x1f\xbf\x4f\xb0\x12\xf7\x5e\x79\x05\xce\x91\xdb\x0c\x5b\x8b\xfc\x93\xe3\xc0\xee\xdb\xa3\xb6\x08\x75\x61\x7b\xe5\x16\xf9\x37\x96\xc7\x13\x9f\x4e\xf4\x90\xe4\xac\x6c\xa0\x97\xea\x26\xc5\xf2\x32\x1e\x23\xa8\x99\x82\x93\x6f\xd0\x77\xe8\x3f\x47\x44\x24\x81\x24\x1b\xce\x50\xaa\x2a\x89\xf5\x4a\x6f\xb8\x12\x77\x2b\x92\x27\x45\x42\xb6\xc7\x55\xd9\xe6\xa2\xe6\x25\x90\xe1\x62\x94\x8b\x51\xee\x31\x6e\x2c\x73\xc2\xbd\xfa\x5c\x9a\x1d\xb1\x65\xac\x66\x8e\x5e\xea\x3d\x8c\xcb\x01\x76\xff\x07\x77\xbb\x56\x6f\x7f\xb3\x4d\x40\x9b\x54\xaa\x49\xc9\x3f\xc8\x66\x27\x78\x36\x0a\x6c\x30\x49\xf8\x56\x50\xc0\x2b\xf7\x68\x34\x75\x55\x64\xf3\x0b\x6d\xc6\xa9\x6e\xbd\xb5\x8f\x51\xda\x8c\xd5\xfa\xef\xae\xa7\x2f\xbf\x7d\x5c\x86\x8f\x87\xb2\x35\x16\xb7\xff\xfd\xe7\xf2\x91\x5d\xd0\x52\x77\x31\x0d\xfb\xc2\xcd\x39\x0c\x9f\x01\x00\x00\xff\xff\x17\xa3\x19\xd1\x39\x02\x00\x00")

func dbMigrations1InitialSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations1InitialSql,
		"db/migrations/1-initial.sql",
	)
}

func dbMigrations1InitialSql() (*asset, error) {
	bytes, err := dbMigrations1InitialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/1-initial.sql", size: 569, mode: os.FileMode(420), modTime: time.Unix(1488393443, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations2UserchangesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcf\x41\x0a\xc2\x30\x10\x85\xe1\x7d\x4f\x31\x7b\xe9\x09\xba\xf5\x0a\xae\x65\x9a\x3c\x25\x34\x99\x94\xe9\x44\x3d\xbe\x08\x2a\x11\xc5\x64\xff\xf3\x1e\xdf\x38\xd2\x2e\x85\xb3\xb2\x81\x0e\xeb\xc0\xd1\xa0\x64\x3c\x47\x50\xd9\xa0\xc4\xde\x93\xcb\xb1\x24\x21\x24\x0e\x91\x0c\x37\x9b\xfe\x76\x12\xdc\x22\x9c\xd0\x91\xf2\x85\x8d\xb5\x68\xcf\xec\x69\x0e\xbe\x67\xd2\x39\x6c\xdb\xd1\xf2\x02\x79\xe6\x43\x8d\xdc\xe7\xab\x7c\x0f\x78\xcd\xeb\x87\xf3\xc7\x49\xdd\xbc\x8c\x8d\xec\xed\x6b\x74\x0f\x5b\x6b\xaa\x72\x4d\xf7\x00\x00\x00\xff\xff\x74\x40\x31\x50\xb6\x01\x00\x00")

func dbMigrations2UserchangesSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations2UserchangesSql,
		"db/migrations/2-userchanges.sql",
	)
}

func dbMigrations2UserchangesSql() (*asset, error) {
	bytes, err := dbMigrations2UserchangesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/2-userchanges.sql", size: 438, mode: os.FileMode(420), modTime: time.Unix(1488022393, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations3EventSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x53\x3d\x6f\xeb\x30\x0c\xdc\xfd\x2b\x38\xc6\x78\x2f\xc0\xdb\xb3\xbe\xbf\xd0\x59\x90\xad\x8b\x43\xd4\xa6\x0c\x8a\x4a\x9a\x7f\x5f\xc8\x4e\xda\x38\x71\x3a\x64\xe8\x26\xf0\xee\xc4\xe3\xd7\x76\x4b\x7f\x06\xee\xd4\x1b\xe8\x6d\xac\x5a\x45\x79\x99\x6f\x7a\x10\x8e\x10\xdb\x54\x44\x44\x1c\x88\xc5\xd0\x41\x69\x54\x1e\xbc\x9e\xe9\x1d\x67\xf2\xd9\x22\x4b\xab\x18\x20\xf6\x77\x62\xa6\x43\x54\x73\x1c\xc8\xf0\x61\x24\xd1\x48\x72\xdf\xcf\x98\xf8\x01\x6b\xf1\x80\xd4\x2a\x8f\xc6\x51\xee\x90\xd9\x4f\x70\xde\x28\x78\x83\xf1\x80\x2f\x06\x05\xec\x7d\xee\x8d\xda\xac\x0a\x31\x57\xd0\x64\x7e\x18\x2f\x4e\xcc\xab\x4d\x8a\xab\x74\x8e\x43\xc2\x4a\x54\xb3\x08\x4b\xe7\x24\x9e\x4a\xa9\x55\xbd\xab\x96\xdd\x48\xa6\xf0\xc3\x6f\xb7\x63\x05\x9e\xea\x7a\xb1\x27\x90\xf0\x7a\x37\x2d\xa7\x52\xf6\xa3\xe4\xdf\x85\x92\x9b\x62\xbc\x81\xba\x36\x66\xb1\x1f\xc9\x63\x6e\x7a\x4e\x07\x97\xb5\x5f\x2d\xf2\xfa\xd7\x53\xc2\x34\x0e\x97\xa0\x47\xa8\x9b\x07\xb2\xb6\x3c\xf1\x09\x68\xea\x25\x8d\x65\x38\x4f\x12\x4c\xdb\xbf\xae\xdd\x47\x05\x77\x52\x66\xbe\xf9\x4e\x52\x93\x62\x0f\x85\xb4\x48\x94\x13\x74\xc3\xa1\x7e\x14\xdc\x1b\x5f\xc8\x16\xe0\xba\xfe\xea\x6b\xa1\x9b\x4f\x95\x43\x5d\xf6\xf6\xf6\xa6\xff\xc7\x93\x54\x41\xe3\x78\x7b\xd3\xbb\xdb\xc8\x9c\x72\xf7\x19\x00\x00\xff\xff\x98\x62\xab\xd8\x09\x04\x00\x00")

func dbMigrations3EventSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations3EventSql,
		"db/migrations/3-event.sql",
	)
}

func dbMigrations3EventSql() (*asset, error) {
	bytes, err := dbMigrations3EventSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/3-event.sql", size: 1033, mode: os.FileMode(420), modTime: time.Unix(1488397393, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/migrations/0-pragma.sql": dbMigrations0PragmaSql,
	"db/migrations/1-initial.sql": dbMigrations1InitialSql,
	"db/migrations/2-userchanges.sql": dbMigrations2UserchangesSql,
	"db/migrations/3-event.sql": dbMigrations3EventSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"0-pragma.sql": &bintree{dbMigrations0PragmaSql, map[string]*bintree{}},
			"1-initial.sql": &bintree{dbMigrations1InitialSql, map[string]*bintree{}},
			"2-userchanges.sql": &bintree{dbMigrations2UserchangesSql, map[string]*bintree{}},
			"3-event.sql": &bintree{dbMigrations3EventSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

