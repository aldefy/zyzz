// Code generated by go-bindata.
// sources:
// db/migrations/0-pragma.sql
// db/migrations/1-initial.sql
// db/migrations/2-userchanges.sql
// db/migrations/3-event.sql
// DO NOT EDIT!

package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbMigrations0PragmaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\xcd\xaa\x83\x30\x10\x46\xf7\x79\x8a\x6f\x7f\xc9\x13\x04\x17\x17\x74\xe7\xf2\x5e\xba\x94\x69\x1d\xd3\xf8\x33\x13\x92\x88\xf8\xf6\xc5\x82\x50\x84\xae\xbf\x73\x66\x8e\xb5\xf8\x59\x82\x4f\x54\x18\xff\x11\xa2\x25\x91\x64\x7a\x94\xa0\x62\xac\x05\x0b\xdd\x67\xc6\xa0\x89\x83\x17\x4c\xbc\x23\xaf\x31\x6a\x2a\x26\x26\xf2\x0b\x9d\x53\x37\xf1\x9e\x51\x41\xc5\x1d\x5e\xe6\x82\x51\x93\xd0\x8c\x45\x7b\x46\x51\x6c\x29\x14\x06\x3d\x99\x7a\xcc\xea\x4f\x1f\xa3\xae\x07\xd7\xbd\xb9\x0a\xb7\xdf\xd6\x19\xf3\xd9\x55\xeb\x26\x97\xb2\x2f\xbf\x87\xc1\x99\x73\xbb\x9c\xad\x9b\xb6\xf9\x6b\xdc\x2b\x00\x00\xff\xff\x07\xb2\xc4\x19\xf0\x00\x00\x00")

func dbMigrations0PragmaSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0PragmaSql,
		"db/migrations/0-pragma.sql",
	)
}

func dbMigrations0PragmaSql() (*asset, error) {
	bytes, err := dbMigrations0PragmaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0-pragma.sql", size: 240, mode: os.FileMode(420), modTime: time.Unix(1487862705, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations1InitialSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\xbb\x6e\xc3\x30\x0c\xdc\xfd\x15\x1c\x13\xb4\x01\xba\x7b\xed\x2f\x74\x16\x64\x8b\x49\x88\xda\x94\x40\x52\x6d\xf2\xf7\x85\xe2\xb4\xb5\x63\xbb\x28\x32\x64\x33\x74\x77\x7c\x1d\xe9\xdd\x0e\x9e\x7a\x3a\x88\x37\x84\xb7\x54\xb5\x82\xe5\xcb\x7c\xd3\x21\xa8\x09\xfa\xde\x29\xca\x07\xca\xa6\x02\x00\xa0\x00\xc4\x86\x07\x14\x48\x42\xbd\x97\x33\xbc\xe3\x19\x7c\xb6\x48\xdc\x0a\xf6\xc8\xf6\x7c\x61\xea\x31\x8a\x39\x0a\x60\x78\x32\xe0\x68\xc0\xb9\xeb\x06\x8c\x7d\x8f\x4b\xef\xc7\xa8\xb6\x86\x95\xb4\xc2\xbe\x73\x94\x96\x60\x3c\xad\xc0\xd5\xb6\xae\xa6\x6d\x65\x7d\x4c\x37\x01\xb5\x15\x4a\x46\x91\x6f\x90\xa1\x9c\xe0\xbc\x41\xf0\x86\x46\x3d\xfe\x30\x20\xe0\xde\xe7\xce\xa0\xcd\x22\xc8\xe6\x0a\xaa\xe6\xfb\x34\x68\x53\x6e\x3a\xd2\x23\x5e\x4a\x9f\xab\x5e\xae\xf5\xe6\xa6\x24\x6f\x56\x69\xf3\xb1\x0c\x6e\x3f\x7a\x30\x0b\xb0\x9a\x97\x7b\xa7\x83\x1c\xee\x54\xaa\x79\xcb\xfa\xbf\xa1\x8a\x6b\x63\x66\xfb\x93\x7c\xf5\xc9\x65\xe9\x16\x9b\xfc\x8e\xb5\x4a\x18\x1f\x9f\xa3\xa9\x8f\xa3\x35\x8a\x2b\xa0\x89\x67\x4d\xc5\x9c\x95\x04\xfb\x28\x48\x07\x2e\xc6\x6e\x7e\x23\x6d\x41\x70\x8f\x82\xdc\xa2\x0e\x97\x42\x61\x3b\x17\xdc\x56\x37\x91\x4d\x40\x2d\x01\x2e\xdb\x36\xfe\xd5\xbc\xc6\x4f\xae\x82\xc4\x34\x59\xbe\x7a\xfc\x54\x92\xd7\x73\xce\x35\x6c\xfd\x15\x00\x00\xff\xff\x2d\x9d\xc3\x25\xb9\x04\x00\x00")

func dbMigrations1InitialSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations1InitialSql,
		"db/migrations/1-initial.sql",
	)
}

func dbMigrations1InitialSql() (*asset, error) {
	bytes, err := dbMigrations1InitialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/1-initial.sql", size: 1209, mode: os.FileMode(420), modTime: time.Unix(1487862705, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations2UserchangesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcf\x41\x0a\xc2\x30\x10\x85\xe1\x7d\x4f\x31\x7b\xe9\x09\xba\xf5\x0a\xae\x65\x9a\x3c\x25\x34\x99\x94\xe9\x44\x3d\xbe\x08\x2a\x11\xc5\x64\xff\xf3\x1e\xdf\x38\xd2\x2e\x85\xb3\xb2\x81\x0e\xeb\xc0\xd1\xa0\x64\x3c\x47\x50\xd9\xa0\xc4\xde\x93\xcb\xb1\x24\x21\x24\x0e\x91\x0c\x37\x9b\xfe\x76\x12\xdc\x22\x9c\xd0\x91\xf2\x85\x8d\xb5\x68\xcf\xec\x69\x0e\xbe\x67\xd2\x39\x6c\xdb\xd1\xf2\x02\x79\xe6\x43\x8d\xdc\xe7\xab\x7c\x0f\x78\xcd\xeb\x87\xf3\xc7\x49\xdd\xbc\x8c\x8d\xec\xed\x6b\x74\x0f\x5b\x6b\xaa\x72\x4d\xf7\x00\x00\x00\xff\xff\x74\x40\x31\x50\xb6\x01\x00\x00")

func dbMigrations2UserchangesSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations2UserchangesSql,
		"db/migrations/2-userchanges.sql",
	)
}

func dbMigrations2UserchangesSql() (*asset, error) {
	bytes, err := dbMigrations2UserchangesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/2-userchanges.sql", size: 438, mode: os.FileMode(420), modTime: time.Unix(1488022393, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations3EventSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\x4b\x72\x83\x30\x0c\xdd\xfb\x14\x5a\x86\x69\x72\x02\xb6\xbd\x42\xd7\x8c\x82\x5f\xa8\xa6\x58\x66\x84\x68\x9a\xdb\x77\xc0\x24\x43\x1a\x96\xdd\x79\xde\x4f\xf2\xb3\x4f\x27\x7a\x4b\xd2\x19\x3b\xe8\x63\x08\xad\x61\x3e\x39\x9f\x7b\x10\xbe\xa1\x7e\x08\x44\x44\x12\x49\xd4\xd1\xc1\x68\x30\x49\x6c\x37\xfa\xc2\x8d\x78\xf2\x2c\xda\x1a\x12\xd4\x8f\x8b\x72\xfc\xcc\xe6\x8d\x44\x72\xfc\x38\x69\x76\xd2\xa9\xef\x0b\xa7\x9c\xb0\x87\x47\x8c\xad\xc9\xe0\x92\xf5\x0f\x53\xf6\x89\x0d\x3b\x45\x76\xb8\x24\x3c\x14\x14\x71\xe1\xa9\x77\x6a\x27\x33\xa8\x37\x33\x3b\x3a\xa7\x61\xdd\xc4\xd9\x7c\x71\xdc\xad\x05\x87\xc6\x1d\xd4\x26\x55\xd1\xae\xd1\x7c\x55\x3a\xe7\xdc\x87\xaa\x0e\x3b\x7d\x34\xa3\x1b\x38\xfd\x67\x2d\x25\x77\x93\xf5\x4c\x97\x81\x7b\xfc\x42\x5f\xb2\x41\x3a\x9d\x07\x1f\xee\x49\x15\x19\x2e\x30\x68\x8b\x71\x7d\x46\x89\xd5\xf1\x45\xff\x88\x7e\x32\xac\x37\x5c\x1c\x55\x1d\xb6\x5f\xe4\x3d\x5f\x35\x44\xcb\xc3\xb6\x92\xfa\x05\x59\x4b\xaa\xc3\x6f\x00\x00\x00\xff\xff\x6a\x79\x95\x18\x5f\x02\x00\x00")

func dbMigrations3EventSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations3EventSql,
		"db/migrations/3-event.sql",
	)
}

func dbMigrations3EventSql() (*asset, error) {
	bytes, err := dbMigrations3EventSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/3-event.sql", size: 607, mode: os.FileMode(420), modTime: time.Unix(1488229054, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/migrations/0-pragma.sql": dbMigrations0PragmaSql,
	"db/migrations/1-initial.sql": dbMigrations1InitialSql,
	"db/migrations/2-userchanges.sql": dbMigrations2UserchangesSql,
	"db/migrations/3-event.sql": dbMigrations3EventSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"0-pragma.sql": &bintree{dbMigrations0PragmaSql, map[string]*bintree{}},
			"1-initial.sql": &bintree{dbMigrations1InitialSql, map[string]*bintree{}},
			"2-userchanges.sql": &bintree{dbMigrations2UserchangesSql, map[string]*bintree{}},
			"3-event.sql": &bintree{dbMigrations3EventSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

