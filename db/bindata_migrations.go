// Code generated by go-bindata.
// sources:
// db/migrations/0-pragma.sql
// db/migrations/1-initial.sql
// db/migrations/2-userchanges.sql
// db/migrations/3-event.sql
// DO NOT EDIT!

package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbMigrations0PragmaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\xcd\xaa\x83\x30\x10\x46\xf7\x79\x8a\x6f\x7f\xc9\x13\x04\x17\x17\x74\xe7\xf2\x5e\xba\x94\x69\x1d\xd3\xf8\x33\x13\x92\x88\xf8\xf6\xc5\x82\x50\x84\xae\xbf\x73\x66\x8e\xb5\xf8\x59\x82\x4f\x54\x18\xff\x11\xa2\x25\x91\x64\x7a\x94\xa0\x62\xac\x05\x0b\xdd\x67\xc6\xa0\x89\x83\x17\x4c\xbc\x23\xaf\x31\x6a\x2a\x26\x26\xf2\x0b\x9d\x53\x37\xf1\x9e\x51\x41\xc5\x1d\x5e\xe6\x82\x51\x93\xd0\x8c\x45\x7b\x46\x51\x6c\x29\x14\x06\x3d\x99\x7a\xcc\xea\x4f\x1f\xa3\xae\x07\xd7\xbd\xb9\x0a\xb7\xdf\xd6\x19\xf3\xd9\x55\xeb\x26\x97\xb2\x2f\xbf\x87\xc1\x99\x73\xbb\x9c\xad\x9b\xb6\xf9\x6b\xdc\x2b\x00\x00\xff\xff\x07\xb2\xc4\x19\xf0\x00\x00\x00")

func dbMigrations0PragmaSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0PragmaSql,
		"db/migrations/0-pragma.sql",
	)
}

func dbMigrations0PragmaSql() (*asset, error) {
	bytes, err := dbMigrations0PragmaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0-pragma.sql", size: 240, mode: os.FileMode(420), modTime: time.Unix(1487862705, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations1InitialSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\xcb\x6e\xe3\x30\x0c\xbc\xfb\x2b\x78\x8c\xb1\x1b\x60\xef\xbe\xee\x2f\xf4\x2c\xd0\x16\x93\x10\xb5\x29\x81\xa2\xda\xe4\xef\x0b\xc5\x69\x6b\xc7\x76\x51\xe4\x90\x9b\xa0\x99\xe1\x6b\x28\xed\xf7\xf0\x67\xe0\xa3\xa2\x11\xbc\xc4\xaa\x53\x2a\x27\xc3\xb6\x27\x48\xa6\x84\x83\x4b\xa4\x6f\xa4\xbb\x0a\x00\x80\x3d\xb0\x18\x1d\x49\x21\x2a\x0f\xa8\x17\x78\xa5\x0b\x60\xb6\xc0\xd2\x29\x0d\x24\xf6\xf7\xca\x4c\xa7\xa0\xe6\xd8\x83\xd1\xd9\x40\x82\x81\xe4\xbe\x1f\x31\xc1\x81\xd6\xee\x4f\x21\xd9\x16\x56\xd2\xaa\x60\xef\x38\xae\xc1\x74\xde\x80\xab\xba\xa9\xe6\x6d\xe5\xf4\x9c\x6e\x3c\xa5\x4e\x39\x1a\x07\xb9\x43\xc6\x72\xbc\x43\x03\x8f\x46\xc6\x03\x7d\x31\xc0\xd3\x01\x73\x6f\xd0\x65\x55\x12\x73\x05\x4d\x86\x43\x1c\xb5\x31\xb7\x3d\xa7\x13\x5d\x4b\x5f\xaa\xfe\xdd\xea\xcd\x6d\x49\xde\x6e\xd2\x96\x63\x19\xdd\x7e\xf6\x60\x56\xe0\x64\xa8\x8f\x4e\x87\xc4\x3f\xa8\x4c\x86\x96\xd3\xef\x86\xaa\xae\x0b\x59\xec\x47\xf2\xcd\x27\x97\xb5\x5f\x6d\xf2\x33\xd6\x26\x61\xfa\xf8\x1c\xcf\x7d\x9c\xac\x51\xd8\x00\x4d\x51\x52\x2c\xe6\x6c\x24\x38\x04\x25\x3e\x4a\x31\x76\xf7\x1d\xa9\x06\xa5\x03\x29\x49\x47\x69\x7c\x29\xec\xeb\xa5\xe0\xbe\xba\x99\x6c\xfe\x6f\xb0\xaf\xaf\xcb\x36\xfd\x69\xfe\x87\x77\xa9\xbc\x86\x38\xdb\xbd\x66\x7a\x55\x72\x37\x4b\xce\x2d\x6a\xf3\x11\x00\x00\xff\xff\x28\x67\x2c\x92\xb8\x04\x00\x00")

func dbMigrations1InitialSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations1InitialSql,
		"db/migrations/1-initial.sql",
	)
}

func dbMigrations1InitialSql() (*asset, error) {
	bytes, err := dbMigrations1InitialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/1-initial.sql", size: 1208, mode: os.FileMode(420), modTime: time.Unix(1488294549, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations2UserchangesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcf\x41\x0a\xc2\x30\x10\x85\xe1\x7d\x4f\x31\x7b\xe9\x09\xba\xf5\x0a\xae\x65\x9a\x3c\x25\x34\x99\x94\xe9\x44\x3d\xbe\x08\x2a\x11\xc5\x64\xff\xf3\x1e\xdf\x38\xd2\x2e\x85\xb3\xb2\x81\x0e\xeb\xc0\xd1\xa0\x64\x3c\x47\x50\xd9\xa0\xc4\xde\x93\xcb\xb1\x24\x21\x24\x0e\x91\x0c\x37\x9b\xfe\x76\x12\xdc\x22\x9c\xd0\x91\xf2\x85\x8d\xb5\x68\xcf\xec\x69\x0e\xbe\x67\xd2\x39\x6c\xdb\xd1\xf2\x02\x79\xe6\x43\x8d\xdc\xe7\xab\x7c\x0f\x78\xcd\xeb\x87\xf3\xc7\x49\xdd\xbc\x8c\x8d\xec\xed\x6b\x74\x0f\x5b\x6b\xaa\x72\x4d\xf7\x00\x00\x00\xff\xff\x74\x40\x31\x50\xb6\x01\x00\x00")

func dbMigrations2UserchangesSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations2UserchangesSql,
		"db/migrations/2-userchanges.sql",
	)
}

func dbMigrations2UserchangesSql() (*asset, error) {
	bytes, err := dbMigrations2UserchangesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/2-userchanges.sql", size: 438, mode: os.FileMode(420), modTime: time.Unix(1488022393, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations3EventSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\xc1\x72\xab\x30\x0c\xbc\xfb\x2b\x74\x0c\xf3\x5e\xbe\x80\x6b\x7f\xa1\x67\x46\xc1\x0b\xd5\x14\xcb\x8c\x10\x4d\xf3\xf7\x1d\x30\xc9\x90\x96\xde\x7a\xf3\xec\x6a\x57\xeb\xb5\xcf\x67\xfa\x97\xa4\x37\x76\xd0\xeb\x18\x5a\xc3\x72\x72\xbe\x0c\x20\x7c\x40\xfd\x14\x88\x88\x24\x92\xa8\xa3\x87\xd1\x68\x92\xd8\x6e\xf4\x8e\x1b\xf1\xec\x59\xb4\x35\x24\xa8\xff\x5f\x27\xa7\xb7\x6c\xde\x48\x24\xc7\xa7\x93\x66\x27\x9d\x87\xa1\x70\xca\x09\x47\x78\xc4\xd4\x9a\x8c\x2e\x59\xbf\x31\x25\x4f\x6c\xd8\x29\xb2\xc3\x25\xe1\x31\x41\x11\x1d\xcf\x83\x53\x3b\x9b\x41\xbd\x59\xd8\xc9\x39\x8d\x5b\x12\x67\xf3\x55\x71\x97\x16\x1c\x1a\x0f\x50\x9b\x55\x45\xfb\x46\xf3\x55\xe9\x92\xf3\x10\xaa\x3a\x1c\xf4\xd1\x4c\x6e\xe0\xf4\x97\xb5\x14\xdf\x9d\xd7\x33\x5d\x16\xfe\xce\x77\xd9\x20\xbd\xae\x9b\x4f\x77\xaf\x8a\x0c\x1d\x0c\xda\x62\xda\x1e\x52\x62\x75\x20\x78\xb8\x3f\x29\xb6\x4b\x4a\xac\x96\x1a\xf6\x9f\xe4\x25\x5f\x35\x44\xcb\xe3\xbe\x94\xfa\x07\xb2\xd5\x54\x87\xaf\x00\x00\x00\xff\xff\x26\xf4\xfe\x05\x61\x02\x00\x00")

func dbMigrations3EventSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations3EventSql,
		"db/migrations/3-event.sql",
	)
}

func dbMigrations3EventSql() (*asset, error) {
	bytes, err := dbMigrations3EventSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/3-event.sql", size: 609, mode: os.FileMode(420), modTime: time.Unix(1488294690, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/migrations/0-pragma.sql": dbMigrations0PragmaSql,
	"db/migrations/1-initial.sql": dbMigrations1InitialSql,
	"db/migrations/2-userchanges.sql": dbMigrations2UserchangesSql,
	"db/migrations/3-event.sql": dbMigrations3EventSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"0-pragma.sql": &bintree{dbMigrations0PragmaSql, map[string]*bintree{}},
			"1-initial.sql": &bintree{dbMigrations1InitialSql, map[string]*bintree{}},
			"2-userchanges.sql": &bintree{dbMigrations2UserchangesSql, map[string]*bintree{}},
			"3-event.sql": &bintree{dbMigrations3EventSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

