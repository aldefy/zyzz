// automatically generated by the FlatBuffers compiler, do not modify

package message

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type StreamMessage struct {
	_tab flatbuffers.Table
}

func GetRootAsStreamMessage(buf []byte, offset flatbuffers.UOffsetT) *StreamMessage {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &StreamMessage{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *StreamMessage) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *StreamMessage) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *StreamMessage) StreamId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *StreamMessage) MessageType() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StreamMessage) MutateMessageType(n byte) bool {
	return rcv._tab.MutateByteSlot(6, n)
}

func (rcv *StreamMessage) Message(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func StreamMessageStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func StreamMessageAddStreamId(builder *flatbuffers.Builder, streamId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(streamId), 0)
}
func StreamMessageAddMessageType(builder *flatbuffers.Builder, messageType byte) {
	builder.PrependByteSlot(1, messageType, 0)
}
func StreamMessageAddMessage(builder *flatbuffers.Builder, message flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(message), 0)
}
func StreamMessageEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
