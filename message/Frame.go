// automatically generated by the FlatBuffers compiler, do not modify

package message

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Frame struct {
	_tab flatbuffers.Table
}

func GetRootAsFrame(buf []byte, offset flatbuffers.UOffsetT) *Frame {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Frame{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Frame) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Frame) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Frame) FrameSize() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Frame) MutateFrameSize(n byte) bool {
	return rcv._tab.MutateByteSlot(4, n)
}

func (rcv *Frame) SampleRate() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Frame) MutateSampleRate(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *Frame) Channels() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Frame) MutateChannels(n byte) bool {
	return rcv._tab.MutateByteSlot(8, n)
}

func (rcv *Frame) Frame(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Frame) FrameLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Frame) FrameBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func FrameStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func FrameAddFrameSize(builder *flatbuffers.Builder, frameSize byte) {
	builder.PrependByteSlot(0, frameSize, 0)
}
func FrameAddSampleRate(builder *flatbuffers.Builder, sampleRate uint32) {
	builder.PrependUint32Slot(1, sampleRate, 0)
}
func FrameAddChannels(builder *flatbuffers.Builder, channels byte) {
	builder.PrependByteSlot(2, channels, 0)
}
func FrameAddFrame(builder *flatbuffers.Builder, frame flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(frame), 0)
}
func FrameStartFrameVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func FrameEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
