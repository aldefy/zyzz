// automatically generated by the FlatBuffers compiler, do not modify

package message

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type StreamControl struct {
	_tab flatbuffers.Table
}

func GetRootAsStreamControl(buf []byte, offset flatbuffers.UOffsetT) *StreamControl {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &StreamControl{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *StreamControl) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *StreamControl) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *StreamControl) FrameSize() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StreamControl) MutateFrameSize(n byte) bool {
	return rcv._tab.MutateByteSlot(4, n)
}

func (rcv *StreamControl) StreamAction() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 1
}

func (rcv *StreamControl) MutateStreamAction(n int8) bool {
	return rcv._tab.MutateInt8Slot(6, n)
}

func (rcv *StreamControl) Encoding() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 1
}

func (rcv *StreamControl) MutateEncoding(n int8) bool {
	return rcv._tab.MutateInt8Slot(8, n)
}

func StreamControlStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func StreamControlAddFrameSize(builder *flatbuffers.Builder, frameSize byte) {
	builder.PrependByteSlot(0, frameSize, 0)
}
func StreamControlAddStreamAction(builder *flatbuffers.Builder, streamAction int8) {
	builder.PrependInt8Slot(1, streamAction, 1)
}
func StreamControlAddEncoding(builder *flatbuffers.Builder, encoding int8) {
	builder.PrependInt8Slot(2, encoding, 1)
}
func StreamControlEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
