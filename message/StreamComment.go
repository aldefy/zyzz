// automatically generated by the FlatBuffers compiler, do not modify

package message

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type StreamComment struct {
	_tab flatbuffers.Table
}

func GetRootAsStreamComment(buf []byte, offset flatbuffers.UOffsetT) *StreamComment {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &StreamComment{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *StreamComment) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *StreamComment) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *StreamComment) UserId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *StreamComment) UserName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *StreamComment) Text() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *StreamComment) Timestamp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *StreamComment) MutateTimestamp(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func StreamCommentStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func StreamCommentAddUserId(builder *flatbuffers.Builder, userId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(userId), 0)
}
func StreamCommentAddUserName(builder *flatbuffers.Builder, userName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(userName), 0)
}
func StreamCommentAddText(builder *flatbuffers.Builder, text flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(text), 0)
}
func StreamCommentAddTimestamp(builder *flatbuffers.Builder, timestamp int64) {
	builder.PrependInt64Slot(3, timestamp, 0)
}
func StreamCommentEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
