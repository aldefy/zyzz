// automatically generated by the FlatBuffers compiler, do not modify

package message;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class StreamMessage extends Table {
  public static StreamMessage getRootAsStreamMessage(ByteBuffer _bb) { return getRootAsStreamMessage(_bb, new StreamMessage()); }
  public static StreamMessage getRootAsStreamMessage(ByteBuffer _bb, StreamMessage obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public StreamMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String eventId() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer eventIdAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public String streamId() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer streamIdAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public byte messageType() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public Table message(Table obj) { int o = __offset(10); return o != 0 ? __union(obj, o) : null; }
  public long timestamp() { int o = __offset(12); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }

  public static int createStreamMessage(FlatBufferBuilder builder,
      int event_idOffset,
      int stream_idOffset,
      byte message_type,
      int messageOffset,
      long timestamp) {
    builder.startObject(5);
    StreamMessage.addTimestamp(builder, timestamp);
    StreamMessage.addMessage(builder, messageOffset);
    StreamMessage.addStreamId(builder, stream_idOffset);
    StreamMessage.addEventId(builder, event_idOffset);
    StreamMessage.addMessageType(builder, message_type);
    return StreamMessage.endStreamMessage(builder);
  }

  public static void startStreamMessage(FlatBufferBuilder builder) { builder.startObject(5); }
  public static void addEventId(FlatBufferBuilder builder, int eventIdOffset) { builder.addOffset(0, eventIdOffset, 0); }
  public static void addStreamId(FlatBufferBuilder builder, int streamIdOffset) { builder.addOffset(1, streamIdOffset, 0); }
  public static void addMessageType(FlatBufferBuilder builder, byte messageType) { builder.addByte(2, messageType, 0); }
  public static void addMessage(FlatBufferBuilder builder, int messageOffset) { builder.addOffset(3, messageOffset, 0); }
  public static void addTimestamp(FlatBufferBuilder builder, long timestamp) { builder.addLong(4, timestamp, 0L); }
  public static int endStreamMessage(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishStreamMessageBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
}

