// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var message = message || {};

/**
 * @enum
 */
message.StreamAction = {
  Start: 1,
  Pause: 2,
  Stop: 3,
  Subscribe: 4
};

/**
 * @enum
 */
message.InputEncoding = {
  Opus: 1,
  PCM: 2,
  AAC: 3
};

/**
 * @enum
 */
message.Message = {
  NONE: 0,
  StreamControl: 1,
  StreamFrame: 2,
  StreamComment: 3
};

/**
 * @constructor
 */
message.StreamControl = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {message.StreamControl}
 */
message.StreamControl.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {message.StreamControl=} obj
 * @returns {message.StreamControl}
 */
message.StreamControl.getRootAsStreamControl = function(bb, obj) {
  return (obj || new message.StreamControl).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
message.StreamControl.prototype.sampleRate = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
message.StreamControl.prototype.channels = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
message.StreamControl.prototype.frameSize = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
};

/**
 * @returns {message.StreamAction}
 */
message.StreamControl.prototype.streamAction = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? /** @type {message.StreamAction} */ (this.bb.readInt8(this.bb_pos + offset)) : message.StreamAction.Start;
};

/**
 * @returns {message.InputEncoding}
 */
message.StreamControl.prototype.encoding = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? /** @type {message.InputEncoding} */ (this.bb.readInt8(this.bb_pos + offset)) : message.InputEncoding.Opus;
};

/**
 * @param {flatbuffers.Builder} builder
 */
message.StreamControl.startStreamControl = function(builder) {
  builder.startObject(5);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} sampleRate
 */
message.StreamControl.addSampleRate = function(builder, sampleRate) {
  builder.addFieldInt32(0, sampleRate, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} channels
 */
message.StreamControl.addChannels = function(builder, channels) {
  builder.addFieldInt8(1, channels, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} frameSize
 */
message.StreamControl.addFrameSize = function(builder, frameSize) {
  builder.addFieldInt8(2, frameSize, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {message.StreamAction} streamAction
 */
message.StreamControl.addStreamAction = function(builder, streamAction) {
  builder.addFieldInt8(3, streamAction, message.StreamAction.Start);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {message.InputEncoding} encoding
 */
message.StreamControl.addEncoding = function(builder, encoding) {
  builder.addFieldInt8(4, encoding, message.InputEncoding.Opus);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
message.StreamControl.endStreamControl = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
message.StreamFrame = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {message.StreamFrame}
 */
message.StreamFrame.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {message.StreamFrame=} obj
 * @returns {message.StreamFrame}
 */
message.StreamFrame.getRootAsStreamFrame = function(bb, obj) {
  return (obj || new message.StreamFrame).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @returns {number}
 */
message.StreamFrame.prototype.frame = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
};

/**
 * @returns {number}
 */
message.StreamFrame.prototype.frameLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Uint8Array}
 */
message.StreamFrame.prototype.frameArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
message.StreamFrame.startStreamFrame = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} frameOffset
 */
message.StreamFrame.addFrame = function(builder, frameOffset) {
  builder.addFieldOffset(0, frameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
message.StreamFrame.createFrameVector = function(builder, data) {
  builder.startVector(1, data.length, 1);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
message.StreamFrame.startFrameVector = function(builder, numElems) {
  builder.startVector(1, numElems, 1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
message.StreamFrame.endStreamFrame = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
message.StreamComment = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {message.StreamComment}
 */
message.StreamComment.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {message.StreamComment=} obj
 * @returns {message.StreamComment}
 */
message.StreamComment.getRootAsStreamComment = function(bb, obj) {
  return (obj || new message.StreamComment).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
message.StreamComment.prototype.userId = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
message.StreamComment.prototype.text = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {flatbuffers.Long}
 */
message.StreamComment.prototype.timestamp = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 */
message.StreamComment.startStreamComment = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} userIdOffset
 */
message.StreamComment.addUserId = function(builder, userIdOffset) {
  builder.addFieldOffset(0, userIdOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} textOffset
 */
message.StreamComment.addText = function(builder, textOffset) {
  builder.addFieldOffset(1, textOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} timestamp
 */
message.StreamComment.addTimestamp = function(builder, timestamp) {
  builder.addFieldInt64(2, timestamp, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
message.StreamComment.endStreamComment = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
message.StreamMessage = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {message.StreamMessage}
 */
message.StreamMessage.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {message.StreamMessage=} obj
 * @returns {message.StreamMessage}
 */
message.StreamMessage.getRootAsStreamMessage = function(bb, obj) {
  return (obj || new message.StreamMessage).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
message.StreamMessage.prototype.streamId = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {message.Message}
 */
message.StreamMessage.prototype.messageType = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? /** @type {message.Message} */ (this.bb.readUint8(this.bb_pos + offset)) : message.Message.NONE;
};

/**
 * @param {flatbuffers.Table} obj
 * @returns {?flatbuffers.Table}
 */
message.StreamMessage.prototype.message = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
message.StreamMessage.startStreamMessage = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} streamIdOffset
 */
message.StreamMessage.addStreamId = function(builder, streamIdOffset) {
  builder.addFieldOffset(0, streamIdOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {message.Message} messageType
 */
message.StreamMessage.addMessageType = function(builder, messageType) {
  builder.addFieldInt8(1, messageType, message.Message.NONE);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} messageOffset
 */
message.StreamMessage.addMessage = function(builder, messageOffset) {
  builder.addFieldOffset(2, messageOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
message.StreamMessage.endStreamMessage = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
message.StreamMessage.finishStreamMessageBuffer = function(builder, offset) {
  builder.finish(offset);
};

// Exports for Node.js and RequireJS
this.message = message;
