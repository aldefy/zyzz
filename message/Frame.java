// automatically generated by the FlatBuffers compiler, do not modify

package message;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Frame extends Table {
  public static Frame getRootAsFrame(ByteBuffer _bb) { return getRootAsFrame(_bb, new Frame()); }
  public static Frame getRootAsFrame(ByteBuffer _bb, Frame obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Frame __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int frameSize() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public long sampleRate() { int o = __offset(6); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public int channels() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public int frame(int j) { int o = __offset(10); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int frameLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer frameAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }

  public static int createFrame(FlatBufferBuilder builder,
      int frame_size,
      long sample_rate,
      int channels,
      int frameOffset) {
    builder.startObject(4);
    Frame.addFrame(builder, frameOffset);
    Frame.addSampleRate(builder, sample_rate);
    Frame.addChannels(builder, channels);
    Frame.addFrameSize(builder, frame_size);
    return Frame.endFrame(builder);
  }

  public static void startFrame(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addFrameSize(FlatBufferBuilder builder, int frameSize) { builder.addByte(0, (byte)frameSize, (byte)0); }
  public static void addSampleRate(FlatBufferBuilder builder, long sampleRate) { builder.addInt(1, (int)sampleRate, (int)0L); }
  public static void addChannels(FlatBufferBuilder builder, int channels) { builder.addByte(2, (byte)channels, (byte)0); }
  public static void addFrame(FlatBufferBuilder builder, int frameOffset) { builder.addOffset(3, frameOffset, 0); }
  public static int createFrameVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startFrameVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endFrame(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

